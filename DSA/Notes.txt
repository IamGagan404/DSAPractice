Stable: order of two equal elements is maintained

append vs extend
li = [1,2,3]
li.append([4]) => [1,2,3,[4]]
li.extend([4]) => [1,2,3,4]

Dictionary Comprehension
keys = ['a','b','c','d','e']
values = [1,2,3,4,5]
# but this line shows dict comprehension here
myDict = { k:v for (k,v) in zip(keys, values)}
dic=dict.fromkeys(range(5), True)
# merge 2 dictionaries
    d1.update(d2)
    d3 = d1 | d2
    d3 = {**d1,**d2}

array should contain elements of same data types, consumes less memory
list can contain elements of multiple data types, consumes more memory

list or any iterators cannot be used as key in dict as they are not hashable and cannot be unique

significance of if __name__ == "__main__":
    provides clear entry point to program. Helps in execution flow of program, whether program is run directly of imported in different module
    when a file is run via cmd, python interpreter automatically sets value of variable __name__ to the name of the module
    so when the condition is satisfied then only code below it is executed. Otherwise, we know program is imported in other module

Global Interpreter Lock(GIL)
Only one thread to take control of python interpreter. Creates bottleneck in multithreaded programs.
Reference counting: python uses counter for each variable, when it reaches 0 variable is released from memory.
If multiple threads are accessing same variable it may cause "race" condition, either memory is never released or
mistakenly released. Also, making multiple locks for shared resources may cause deadlocks. So GIL makes sure
execution of any python code should have interpreter lock, effectively making python single threaded
Alternative to this approach is Garbage Collection, it may lose performance of single threaded programs


What is a Decorator?
A decorator is a higher-order function that takes another function as input, adds functionality to it, and returns
the modified function. Essentially, it “wraps” a function, altering its behavior without changing its core logic.

def deco(func):
    def wrapper(*args,**kwargs):
        re = func(*args,**kwargs)
        re += 1 #modify the result
        return re
    return wrapper

@deco
def func(n):
    return n+1

# call the func
func(2)

GENERATORS
def count_up_to(max):
    count = 1
    while count <= max:
        yield count
        count += 1

for number in count_up_to(5):
    print(number)




There is no method overloading in python
def func1(a,b):
    return a+b
def func1(a):
    return 2*a
print(func1(2,4)
If needed use multiple dispatch
@dispatch(int,int)
def func1
    ...
@dispatch(int)
def func1
    ...


@staticmethod
decorator is used to bind a function to class itself not the class instance
it does not receive default "self" argument
a function that could be written as stand alone, but it makes more sense semantically to write within the class
itself. can be called from outside without creating instance. one example could be function to convert title to slug.


Name mangling => class function name __class_.method()
walrus operator  => assign value at runtime using :=     n:= len(nums)
monkey patching => override method inside a class with a function defined outside



Heapq module
> popular module to implement priority queue, internally done in typical binary tree with min element as root
> provides functions to perform on heap with list like behaviour
> create list list1, heapq.heapify(list1) will create heap IN PLACE, all operations are IN PLACE
> hq.heappush(h,5), hq.heappop(h), hq.heappushpop(h,5), hq.nlargest(h,3), hq.nsmallest(h,3), hq.heapreplace(h,4),
  hq.merge(h1,h2)
> heappushpop will push element first then return smallest element while heapreplace will return the smallest element first
  then inserts given argument.


Union Find Data Structure
Useful when find equivalent relations between a set pf groups

# count number of class instances created
# custom context manager




01. Prefix Sum
02. Two Pointers
03. Sliding Window
04. Fast and Slow Pointers
05. Linked List in-place reversal
06. Monotonic Stack
07. Top K. Elements OR min/max Heap
08. Overlapping Intervals
09. Modified Binary Search
10. Binary Tree Traversal
11. Depth First Search
12. Breadth First Search
13. Matrix Traversal
14. Backtracking
15. Dynamic Programming


Prefix Sum
303. Range Sum Query - Immutable
525. Contiguous Array
560. Subarray Sum Equals K

Two Pointers
167. Two Sum II - Input Array is Sorted
15. 3 Sum
11. Container with most water

Sliding Window
643. Maximum Average Subarray I
3. Longest Substring without Repeating Characters
76. Minimum Window Substring

Fast and Slow Pointers
141. Linked List Cycle
202. Happy Number
287. Find the Duplicate Number

Linked List in-place reversal
206. Reverse Linked List
92. Reverse Linked List II
24. Swap Nodes in Pairs

Monotonic Stack
496. Next Greater Element I
739. Daily Temperatures
84. Largest Rectangle in Histogram

Top K. Elements OR min/max Heap
215. Kth Largest element in an array
347. Top K Frequent Elements
373. Find K Pairs with The Smallest Sums

Overlapping Intervals
56. Merge Intervals
57. Insert Interval
435. Non-overlapping intervals

Modified Binary Search
33. Search in Rotated Sorted Array
153. Find Minimum in Rotated Sorted Array
240. Search a 2D Matrix II

Binary Tree Traversal
257. Binary Tree Paths
230. Kth Smallest Element in a BST
124. Binary Tree Maximum Path Sum
107. Binary Tree Level Order Traversal II

Depth First Search
133. Clone Graph
113. Path Sum II
210. Course Schedule II

Breadth First Search
102. Binary Tree Level Order Traversal
994. Rotting Oranges
127. Word Ladder

Matrix Traversal
733. Flood Fill
200. Number of Islands
130. Surrounded Regions

Backtracking
46. Permutations
78. Subsets
51. N-Queens

Dynamic Programming
70. Climbing Stairs
322. Coin Change
300. Longest Increasing Subsequence
416. Partition Equal Subset Sum
312. Burst Balloons
1143. Longest Common Subsequence



